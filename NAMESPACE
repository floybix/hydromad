import(stats)
importFrom(lattice,
           xyplot,
           qqmath)
importFrom(car,
           powerTransform,
           bcPower)
importFrom(Hmisc,
           wtd.quantile)
import(zoo)
importFrom(graphics,plot)
import(latticeExtra)
import(polynom)
import(reshape)

## Exports from imported packages
export(simulate,fitted,residuals,predict,update,coef)
export(xyplot)
export(summary,print)
export(plot)

## CORE FUNCTIONS

export(hydromad)
S3method(print, hydromad)
S3method(fitted, hydromad)
S3method(residuals, hydromad)
S3method(observed, hydromad)
S3method(vcov, hydromad)
S3method(logLik, hydromad)
S3method(deviance, hydromad)
S3method(str, hydromad.runlist)
export(isValidModel)
S3method(isValidModel, default)
S3method(isValidModel, hydromad)

S3method(predict, hydromad)

S3method(update, hydromad)

S3method(coef, hydromad)

export(absorbScale)
S3method(absorbScale, hydromad)

S3method(simulate, hydromad)

export(parameterSets)
export(rotatedSampling)

S3method(summary, hydromad)
S3method(summary, hydromad.runlist)
S3method(print, summary.hydromad)
S3method(print, summaryWithBreaks.hydromad)

S3method(plot, hydromad)
S3method(xyplot, hydromad)
S3method(xyplot, hydromad.runlist)
S3method(qqmath, hydromad)
S3method(tsdiag, hydromad)


## ROUTING MODELS

export(tryModelOrders)
S3method(summary, tryModelOrders)

export(makePrefilter, ## remove this?
       estimateDelay,
       estimateDelayFrac,lagFrac
       )

export(tfParsConvert)

export(armax.sim,
       ssg.armax,
       normalise.armax,
       armax.ls.fit,
       armax.sriv.fit,
       armax.inverse.fit,
       armax.inverse.sim)
useDynLib(hydromad, sriv_system)
useDynLib(hydromad, inverse_filter)

export(expuh.sim,
       ssg.expuh,
       normalise.expuh,
       expuh.ls.fit,
       expuh.sriv.fit,
       expuh.inverse.fit,
       expuh.inverse.sim,
       maexpuh.sim
)

export(filter_loss) # export?
useDynLib(hydromad, filter_constloss)

export(expuh3s.sim,leakyExpStore.sim)

export(powuh.sim,
       ssg.powuh,
       normalise.powuh)

export(lambda.sim,
       ssg.lambda,
       normalise.lambda,
       lambda.inverse.sim,
       lambda.inverse.fit)
useDynLib(hydromad, inverse_filter_lambda)

export(deconvolution.uh)

## tf.R
S3method(print, tf)
S3method(coef, tf)
S3method(update, tf)
S3method(predict, tf)
S3method(fitted, tf)
S3method(observed, tf)
S3method(xyplot, tf)
S3method(vcov, tf)


## SOIL MOISTURE ACCOUNTING MODELS

export(scalar.sim)
export(absorbScale.hydromad.scalar)

export(cwi.sim)
export(absorbScale.hydromad.cwi)
export(filter_tv)
useDynLib(hydromad, ar1_tv)

export(cmd.sim)
useDynLib(hydromad, sma_cmd)
export(cmd_unstable.sim)

export(bucket.sim)
useDynLib(hydromad, sma_bucket)

export(gr4j.sim)
useDynLib(hydromad, sma_gr4j)
export(gr7j.sim)
useDynLib(hydromad, sma_gr7j)
export(gr8j.sim)
useDynLib(hydromad, sma_gr8j)
export(gr4jrouting.sim)
useDynLib(hydromad, routing_gr4j)
export(gr4j.transformpar)


export(awbm.sim)
useDynLib(hydromad, sma_awbm)

export(sacramento.sim)
useDynLib(hydromad, sma_sac)
useDynLib(hydromad, sma_sac_state)

export(snow.sim)
useDynLib(hydromad, sma_snow)

export(runoffratio.sim)
export(absorbScale.hydromad.runoffratio)

export(dbm.sim)
export(absorbScale.hydromad.dbm)

export(intensity.sim)
export(absorbScale.hydromad.intensity)

## CALIBRATION METHODS

export(fitDbmToPeaks)

export(fitBySampling)

export(fitByOptim)
export(fitByOptim1)

export(fitBySCE,
       fitByDE,
       fitByDream,
       fitByNsga2,
       fitByCMAES,
       fitByDDS
       )

## TODO?: fitByGenoud,fitByPSO

## sce.R
export(SCEoptim)

## OBJECTIVE FUNCTIONS

export(optimtrace)
S3method(optimtrace, default)

export(nseStat)
export(fitStat) ## deprecated
export(nseVarTd,adjVarTd)

export(objFunVal)
S3method(objFunVal, default)
S3method(objFunVal, hydromad)

export(buildCachedObjectiveFun)

export(buildTsObjective)
export(buildTsLikelihood)

export(defineFeasibleSet)
S3method(defineFeasibleSet, default)
S3method(defineFeasibleSet, hydromad)

export(findUnivariateBounds)
export(eigen.plot,eigen.plot.single)
export(evalRSM)
export(runRSM)
S3method(print,summary.rsm.hydromad)


## RUNLIST / MULTI-MODEL

## runlist.R
export(runlist,
       as.runlist)
S3method("[", runlist)
S3method(c, runlist)
S3method(c, hydromad)
S3method(coef, runlist)
S3method(summary, runlist)
S3method(print, runlist)
S3method(residuals, runlist)
S3method(fitted, runlist)
S3method(update, runlist)
S3method(xyplot, runlist)
S3method(qqmath, runlist)
S3method(objFunVal, runlist)

export(splitData)
export(crossValidate)
S3method(summary,crossvalidation)

export(paretoObjectivesNsga2)
export(paretoObjectivesVaryWeights)

## paretoTimeAnalysis
export(paretoTimeAnalysis)
export(paretoTimeAnalysis.crossvalidation)
export(paretoTimeAnalysis.data.frame)
export(paretoTimeAnalysis_areModelsDominated)
export(paretoFilter)
export(plotPCNSE)

## MISCELLANEOUS

export(convertFlow)

export(evalPars)
export(getFreeParsRanges)
export(evalParsTS)
export(evalParsRollapply)
export(tellTS)
export(tellTS.default)
export(tellTS.sobol2002)
export(tellTS.sobol2007)
export(tellTS.morris)

## events.R
export(findThresh,
       eventseq,
       eventapply,
       eventinfo)

export(eventsExplorer)

export(event.xyplot)
S3method(event.xyplot, formula)
S3method(event.xyplot, hydromad)
S3method(event.xyplot, hydromad.runlist)

export(panel.ribbon)
S3method(panel.ribbon, default)
S3method(panel.ribbon, ts)
S3method(panel.ribbon, zoo)

## utilities.R
export(observed,
       observed.default,
       numericSummary)

## rollccf.R
export(rollccf,
       xyplot.rollccf,
       ccfForLags)

export(hydromad.stats,
       hmadstat)

export(fdc.allpoints,fdc.sample)

export(hydromad.options,
       hydromad.getOption)


## SWIMP

## swimp.R
export(swimp)
useDynLib(hydromad, swimp_core)

## poweroid.R
export(poweroid)

## Rcpp simhyd
export(simhyd.sim,simhydrouting.sim)
useDynLib(hydromad,"_hydromad_simhyd_sim")
importFrom(Rcpp, sourceCpp)
export(simhyd.ranges,simhydrouting.ranges)