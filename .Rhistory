xtsize = function(initial_df){
colnames(initial_df)[1] = c('date')
initial_df$date = as.Date(initial_df$date)
ts_df  = xts(initial_df$outflow, initial_df$date, frequence=1)
colnames(ts_df) = 'outflow'
return(ts_df)
}
cal_each_station <- function(iii, tsPQE= tsPQE){
# iii = station ID
# tsPQE = list of tsPQE
print(iii)
# hydromad.options(warmup = 730)
hobj = hydromad(tsPQE[[iii]], sma='sacramento',
uztwm = range(12, 180),
uzfwm = range(5, 155),
uzk   = range(0.1, 1.0),
pctim = range(1e-6, 1e-1),
adimp = range(1e-5, 0.15),
zperc = range(1, 600),
rexp  = range(1, 6),
lztwm = range(10, 600),
lzfsm = range(1, 350),
lzfpm = range(1, 300),
lzsk  = range(1e-3, 0.9),
lzpk  = range(1e-3, 0.9),
pfree = range(0.01, 0.5))  #ref? ask Justin
# OBJ_fitted <- fitBySCE(hobj, control = list(trace = 1, ncomplex = 1))
set.seed(1001)
OBJ_fitted <- hydromad::fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 100) )
return(OBJ_fitted)
}
extract_calibrated_obj = function(x, id){
out = cbind(as.data.frame(t(x[[id]]$'fit.result'$'optim'$'bestmem')),  -(x[[id]]$'fit.result'$'optim'$'bestval'))
colnames(out)[ncol(out)] = 'obj_value'
print(out)
out = cbind(data.frame(station = id), out)
return(out)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages -----------------------------------------------------------
# install.packages('DEoptim', lib = 'C:/Users/seo010/Documents/R/win-library/3.3')
library(xts)
library(hydromad)
library(foreach)
library(doParallel)
# custom functions ------------------------------------------------------------------
xtsize = function(initial_df){
colnames(initial_df)[1] = c('date')
initial_df$date = as.Date(initial_df$date)
ts_df  = xts(initial_df$outflow, initial_df$date, frequence=1)
colnames(ts_df) = 'outflow'
return(ts_df)
}
read_input = function(id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg2))
if (!(nrow(seg2)<240)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
cal_each_station <- function(iii, tsPQE= tsPQE){
# iii = station ID
# tsPQE = list of tsPQE
print(iii)
# hydromad.options(warmup = 730)
hobj = hydromad(tsPQE[[iii]], sma='sacramento',
uztwm = range(12, 180),
uzfwm = range(5, 155),
uzk   = range(0.1, 1.0),
pctim = range(1e-6, 1e-1),
adimp = range(1e-5, 0.15),
zperc = range(1, 600),
rexp  = range(1, 6),
lztwm = range(10, 600),
lzfsm = range(1, 350),
lzfpm = range(1, 300),
lzsk  = range(1e-3, 0.9),
lzpk  = range(1e-3, 0.9),
pfree = range(0.01, 0.5))  #ref? ask Justin
# OBJ_fitted <- fitBySCE(hobj, control = list(trace = 1, ncomplex = 1))
set.seed(1001)
OBJ_fitted <- hydromad::fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 100) )
return(OBJ_fitted)
}
extract_calibrated_obj = function(x, id){
out = cbind(as.data.frame(t(x[[id]]$'fit.result'$'optim'$'bestmem')),  -(x[[id]]$'fit.result'$'optim'$'bestval'))
colnames(out)[ncol(out)] = 'obj_value'
print(out)
out = cbind(data.frame(station = id), out)
return(out)
}
# list of station IDs -----------------------------------------------------
cal <- read.csv("//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRAL_v4_5/Data/catchmentId_295_for_exp20140815_removed_regulated_catchments.csv")$StationID
all <- read.csv("//wron/working/WiradaData/AWRAL_v4_5/Data/all_catchmentId_586_for_zones_exp20141009_removed_regulated_catchments.csv")$StationID
val <- all[!all %in% cal]
list_IDs = val
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
# reall the input over parallel computation -------------------------------
cl = makeCluster((detectCores()-1))
read_input(list_IDs[1])
read_input = function(dir_input, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg2))
if (!(nrow(seg2)<240)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
2.4*5
365*0.95
# library(zoo)
library(xts)
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
hydromad.options(objective = hmadstat('r.squared'))
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
hydromad.options(objective = hmadstat('r.squared'))
set.seed(1001)
OBJ_fitted <- fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 200) )
read_input = function(dir_input, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
if (!((nrow(seg1)+nrow(seg2))<347)){ #if missing values excess 5% of 8 months and discard that water year
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
source('List_Parameters.R')
source('List_Parameters.R')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages -----------------------------------------------------------
# install.packages('DEoptim', lib = 'C:/Users/seo010/Documents/R/win-library/3.3')
library(xts)
library(hydromad)
library(foreach)
library(doParallel)
# custom functions ------------------------------------------------------------------
xtsize = function(initial_df){
colnames(initial_df)[1] = c('date')
initial_df$date = as.Date(initial_df$date)
ts_df  = xts(initial_df$outflow, initial_df$date, frequence=1)
colnames(ts_df) = 'outflow'
return(ts_df)
}
cal_each_station <- function(iii, tsPQE= tsPQE){
# iii = station ID
# tsPQE = list of tsPQE
print(iii)
# hydromad.options(warmup = 730)
hobj = hydromad(tsPQE[[iii]], sma='sacramento',
uztwm = range(12, 180),
uzfwm = range(5, 155),
uzk   = range(0.1, 1.0),
pctim = range(1e-6, 1e-1),
adimp = range(1e-5, 0.15),
zperc = range(1, 600),
rexp  = range(1, 6),
lztwm = range(10, 600),
lzfsm = range(1, 350),
lzfpm = range(1, 300),
lzsk  = range(1e-3, 0.9),
lzpk  = range(1e-3, 0.9),
pfree = range(0.01, 0.5))  #ref? ask Justin
# OBJ_fitted <- fitBySCE(hobj, control = list(trace = 1, ncomplex = 1))
set.seed(1001)
OBJ_fitted <- hydromad::fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 100) )
return(OBJ_fitted)
}
extract_calibrated_obj = function(x, id){
out = cbind(as.data.frame(t(x[[id]]$'fit.result'$'optim'$'bestmem')),  -(x[[id]]$'fit.result'$'optim'$'bestval'))
colnames(out)[ncol(out)] = 'obj_value'
print(out)
out = cbind(data.frame(station = id), out)
return(out)
}
# list of station IDs -----------------------------------------------------
cal <- read.csv("//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRAL_v4_5/Data/catchmentId_295_for_exp20140815_removed_regulated_catchments.csv")$StationID
all <- read.csv("//wron/working/WiradaData/AWRAL_v4_5/Data/all_catchmentId_586_for_zones_exp20141009_removed_regulated_catchments.csv")$StationID
val <- all[!all %in% cal]
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
ct =0
# read_input --------------------------------------------------------------
read_input = function(id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg2))
if (!(nrow(seg2)<240)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
library(xts)
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
hydromad.options(objective = hmadstat('r.squared'))
set.seed(1001)
OBJ_fitted <- fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 200) )
read_input
365*0.95
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages -----------------------------------------------------------
# install.packages('DEoptim', lib = 'C:/Users/seo010/Documents/R/win-library/3.3')
library(xts)
library(hydromad)
library(foreach)
library(doParallel)
# custom functions ------------------------------------------------------------------
xtsize = function(initial_df){
colnames(initial_df)[1] = c('date')
initial_df$date = as.Date(initial_df$date)
ts_df  = xts(initial_df$outflow, initial_df$date, frequence=1)
colnames(ts_df) = 'outflow'
return(ts_df)
}
cal_each_station <- function(iii, tsPQE= tsPQE){
# iii = station ID
# tsPQE = list of tsPQE
print(iii)
# hydromad.options(warmup = 730)
hobj = hydromad(tsPQE[[iii]], sma='sacramento',
uztwm = range(12, 180),
uzfwm = range(5, 155),
uzk   = range(0.1, 1.0),
pctim = range(1e-6, 1e-1),
adimp = range(1e-5, 0.15),
zperc = range(1, 600),
rexp  = range(1, 6),
lztwm = range(10, 600),
lzfsm = range(1, 350),
lzfpm = range(1, 300),
lzsk  = range(1e-3, 0.9),
lzpk  = range(1e-3, 0.9),
pfree = range(0.01, 0.5))  #ref? ask Justin
# OBJ_fitted <- fitBySCE(hobj, control = list(trace = 1, ncomplex = 1))
set.seed(1001)
OBJ_fitted <- hydromad::fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 100) )
return(OBJ_fitted)
}
extract_calibrated_obj = function(x, id){
out = cbind(as.data.frame(t(x[[id]]$'fit.result'$'optim'$'bestmem')),  -(x[[id]]$'fit.result'$'optim'$'bestval'))
colnames(out)[ncol(out)] = 'obj_value'
print(out)
out = cbind(data.frame(station = id), out)
return(out)
}
# list of station IDs -----------------------------------------------------
cal <- read.csv("//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRAL_v4_5/Data/catchmentId_295_for_exp20140815_removed_regulated_catchments.csv")$StationID
all <- read.csv("//wron/working/WiradaData/AWRAL_v4_5/Data/all_catchmentId_586_for_zones_exp20141009_removed_regulated_catchments.csv")$StationID
val <- all[!all %in% cal]
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
ct =0
# read_input --------------------------------------------------------------
read_input = function(dir_intput, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg1)+nrow(seg2))
if (!((nrow(seg1)+nrow(seg2))<347)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
# read_input --------------------------------------------------------------
read_input = function(dir_intput, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexm
# read_input --------------------------------------------------------------
read_input = function(dir_intput, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg1)+nrow(seg2))
if (!((nrow(seg1)+nrow(seg2))<347)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
hobj = hydromad(read_input(dir_input = dir_input, id = list_IDs[2]), sma='sacramento')
list_IDs
read_input(dir_input = dir_input, id = list_IDs[2])
read_input(dir_intput = dir_input, id = list_IDs[2])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load packages -----------------------------------------------------------
# install.packages('DEoptim', lib = 'C:/Users/seo010/Documents/R/win-library/3.3')
library(xts)
library(hydromad)
library(foreach)
library(doParallel)
# custom functions ------------------------------------------------------------------
xtsize = function(initial_df){
colnames(initial_df)[1] = c('date')
initial_df$date = as.Date(initial_df$date)
ts_df  = xts(initial_df$outflow, initial_df$date, frequence=1)
colnames(ts_df) = 'outflow'
return(ts_df)
}
cal_each_station <- function(iii, tsPQE= tsPQE){
# iii = station ID
# tsPQE = list of tsPQE
print(iii)
# hydromad.options(warmup = 730)
hobj = hydromad(tsPQE[[iii]], sma='sacramento',
uztwm = range(12, 180),
uzfwm = range(5, 155),
uzk   = range(0.1, 1.0),
pctim = range(1e-6, 1e-1),
adimp = range(1e-5, 0.15),
zperc = range(1, 600),
rexp  = range(1, 6),
lztwm = range(10, 600),
lzfsm = range(1, 350),
lzfpm = range(1, 300),
lzsk  = range(1e-3, 0.9),
lzpk  = range(1e-3, 0.9),
pfree = range(0.01, 0.5))  #ref? ask Justin
# OBJ_fitted <- fitBySCE(hobj, control = list(trace = 1, ncomplex = 1))
set.seed(1001)
OBJ_fitted <- hydromad::fitByDE(hobj, control = DEoptim::DEoptim.control(itermax = 100) )
return(OBJ_fitted)
}
extract_calibrated_obj = function(x, id){
out = cbind(as.data.frame(t(x[[id]]$'fit.result'$'optim'$'bestmem')),  -(x[[id]]$'fit.result'$'optim'$'bestval'))
colnames(out)[ncol(out)] = 'obj_value'
print(out)
out = cbind(data.frame(station = id), out)
return(out)
}
# list of station IDs -----------------------------------------------------
cal <- read.csv("//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRAL_v4_5/Data/catchmentId_295_for_exp20140815_removed_regulated_catchments.csv")$StationID
all <- read.csv("//wron/working/WiradaData/AWRAL_v4_5/Data/all_catchmentId_586_for_zones_exp20141009_removed_regulated_catchments.csv")$StationID
val <- all[!all %in% cal]
dir_input = '//lw-osm-04-cdc.it.csiro.au/OSM_CBR_LW_WIRADA_work/Working/WiradaData/AWRA_Projections/4_catchment_selection/1_input_data'
ct =0
# read_input --------------------------------------------------------------
read_input = function(dir_input, id){
#read input from wirada
df = read.csv(paste0(dir_input,'/',id,'_data.csv'), comment.char = '#')[,c('date', 'P_mm', 'E_mm', 'Qobs_mm')]
colnames(df) = c('date', 'P', 'E', 'Q')
df$date = as.Date(df$date)
#remove missing value
filtered = df[!is.na(df$Q),]
filtered = xts(filtered[,c('P','Q', 'E')], filtered$date, frequency = 1)
# write.zoo(filtered, 'test.csv', sep=',')
years = unique(.indexyear(filtered))
#sort out by wateryear
waterYear_only = c()
for (year in years){
output = c()
if ((year+1) %in% years){
seg1 = filtered[.indexyear(filtered) %in% year]
seg1 = seg1[.indexmon(seg1) %in% 8:11]
seg2 = filtered[.indexyear(filtered) %in% (year+1)]
seg2 = seg2[.indexmon(seg2) %in% 0:7]
print(nrow(seg1)+nrow(seg2))
if (!((nrow(seg1)+nrow(seg2))<347)){
output = rbind(seg1, seg2)
}
}
waterYear_only = rbind(waterYear_only, output)
}
#number of years to be calibrated
n_year = 5
return(waterYear_only)
}
